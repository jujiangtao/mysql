#
# Tests for various concurrency-related aspects of ALTER TABLE implemetation
#
# Test need MyISAM to support disable key feature
--source include/have_myisam.inc
# This test takes rather long time so let us run it only in --big-test mode
--source include/big_test.inc
# We are using some debug-only features in this test
--source include/have_debug.inc
# Also we are using SBR to check that statements are executed
# in proper order.
--source include/force_binlog_format_statement.inc

--source include/count_sessions.inc

#
# Test for Bug#25044 ALTER TABLE ... ENABLE KEYS acquires global
#                    'opening tables' lock
#
# ALTER TABLE ... ENABLE KEYS should not acquire LOCK_open mutex for
# the whole its duration as it prevents other queries from execution.
--disable_warnings
drop table if exists t1, t2;
--enable_warnings
set debug_sync='RESET';

connect (addconroot, localhost, root,,);
connect (addconroot2, localhost, root,,);
connection default;
create table t1 (n1 int, n2 int, n3 int,
                key (n1, n2, n3),
                key (n2, n3, n1),
                key (n3, n1, n2)) engine=myisam;
create table t2 (i int);

alter table t1 disable keys;
insert into t1 values (1, 2, 3);

# Later we use binlog to check the order in which statements are
# executed so let us reset it first.
reset master;
set debug_sync='alter_table_enable_indexes SIGNAL parked WAIT_FOR go';
--send alter table t1 enable keys;
connection addconroot;
# Wait until ALTER TABLE acquires metadata lock.
set debug_sync='now WAIT_FOR parked';
# This statement should not be blocked by in-flight ALTER and therefore
# should be executed and written to binlog before ALTER TABLE ... ENABLE KEYS
# finishes.
insert into t2 values (1);
# And this should wait until the end of ALTER TABLE ... ENABLE KEYS.
--send insert into t1 values (1, 1, 1);
connection addconroot2;
# Wait until the above INSERT INTO t1 is blocked due to ALTER
let $wait_condition=
    select count(*) = 1 from information_schema.processlist
    where state = "Waiting for table metadata lock" and
          info = "insert into t1 values (1, 1, 1)";
--source include/wait_condition.inc
# Resume ALTER execution.
set debug_sync='now SIGNAL go';
connection default;
--reap
connection addconroot;
--reap
connection default;
# Check that statements were executed/binlogged in correct order.
source include/show_binlog_events.inc;

# Clean up
drop tables t1, t2;
disconnect addconroot;
disconnect addconroot2;
set debug_sync='RESET';

--echo End of 5.0 tests

#
# Additional coverage for the main ALTER TABLE case
#
# We should be sure that table being altered is properly
# locked during statement execution and in particular that
# no DDL or DML statement can sneak in and get access to
# the table when real operation has already taken place
# but this fact has not been noted in binary log yet.
--disable_warnings
drop table if exists t1, t2, t3;
--enable_warnings
connect (addconroot, localhost, root,,);
connect (addconroot2, localhost, root,,);
connection default;
create table t1 (i int);
# We are going to check that statements are logged in correct order
reset master;
set debug_sync='alter_table_before_main_binlog SIGNAL parked WAIT_FOR go';
--send alter table t1 change i c char(10) default 'Test1';
connection addconroot;
# Wait until ALTER TABLE acquires metadata lock.
set debug_sync='now WAIT_FOR parked'; 
--send insert into t1 values ();
connection addconroot2;
# Wait until the above INSERT INTO t1 is blocked due to ALTER
let $wait_condition=
    select count(*) = 1 from information_schema.processlist
    where state = "Waiting for table metadata lock" and
          info = "insert into t1 values ()";
--source include/wait_condition.inc
# Resume ALTER execution.
set debug_sync='now SIGNAL go';
connection default;
--reap
connection addconroot;
--reap
connection default;
select * from t1;
set debug_sync='alter_table_before_main_binlog SIGNAL parked WAIT_FOR go';
--send alter table t1 change c vc varchar(100) default 'Test2';
connection addconroot;
# Wait until ALTER TABLE acquires metadata lock.
set debug_sync='now WAIT_FOR parked';
--send rename table t1 to t2;
connection addconroot2;
# Wait until the above RENAME TABLE is blocked due to ALTER
let $wait_condition=
    select count(*) = 1 from information_schema.processlist
    where state = "Waiting for table metadata lock" and
          info = "rename table t1 to t2";
--source include/wait_condition.inc
# Resume ALTER execution.
set debug_sync='now SIGNAL go';
connection default;
--reap
connection addconroot;
--reap
connection default;
drop table t2;
# And now tests for ALTER TABLE with RENAME clause. In this
# case target table name should be properly locked as well.
create table t1 (i int);
set debug_sync='alter_table_before_main_binlog SIGNAL parked WAIT_FOR go';
--send alter table t1 change i c char(10) default 'Test3', rename to t2;
connection addconroot;
# Wait until ALTER TABLE acquires metadata lock.
set debug_sync='now WAIT_FOR parked';
--send insert into t2 values();
connection addconroot2;
# Wait until the above INSERT INTO t2 is blocked due to ALTER
let $wait_condition=
    select count(*) = 1 from information_schema.processlist
    where state = "Waiting for table metadata lock" and
           info = "insert into t2 values()";
--source include/wait_condition.inc
# Resume ALTER execution.
set debug_sync='now SIGNAL go';
connection default;
--reap
connection addconroot;
--reap
connection default;
select * from t2;
--send alter table t2 change c vc varchar(100) default 'Test2', rename to t1;
connection addconroot;
connection default;
--reap
rename table t1 to t3;

disconnect addconroot;
disconnect addconroot2;
drop table t3;
set debug_sync='alter_table_before_main_binlog SIGNAL parked WAIT_FOR go';
set debug_sync='RESET';

# Check that all statements were logged in correct order
source include/show_binlog_events.inc;


--echo End of 5.1 tests
--source include/restore_default_binlog_format.inc


--echo #
--echo # Bug#22681959 : SELECT ON I_S TABLES WITH CONCURRENT DDL MAY CRASH SERVER
--echo # Bug#22285643 : I_S QUERIES OPENING TMP TABLES FROM ALTER INVALIDATES REFERENCE COUNTER
--echo #

#
# Preparative cleanup.
#
--disable_warnings
SET DEBUG_SYNC= 'RESET';
DROP SCHEMA IF EXISTS test_i_s;
--enable_warnings

#
# This is test case to check assert in Bug#22681959.
#
CREATE SCHEMA test_i_s;
USE test_i_s;
CREATE TABLE t1(a INT) ENGINE=MYISAM;

--echo # Create new connections
--enable_connect_log
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
connect (con4,localhost,root,,);
connect (con5,localhost,root,,);

--connection default
SET GLOBAL DEBUG='d,alter_table_after_rename';
SET DEBUG_SYNC=
  'before_rename_in_dd SIGNAL blocked WAIT_FOR i_s_select';
SET DEBUG_SYNC=
  'after_rename_in_dd SIGNAL blocked_2 WAIT_FOR i_s_select_2';

--echo # Sending ALTER Command
--send ALTER TABLE t1 add column (c2 int);

--connection con1
SET DEBUG_SYNC= 'now WAIT_FOR blocked';
SET DEBUG_SYNC=
  'show_after_table_list_prep SIGNAL i_s_select WAIT_FOR blocked_2';
--send SELECT table_name FROM information_schema.partitions WHERE SUBSTR(table_name,1,1)='#';

--connection con2
# Without Fix, ALTER command gets signal to continue from above.
# It asserts trying to put dd::Table object in the Dictionary Cache.
# With the Fix, ALTER gets MDL on the temporary table name.
# SELECT on I_S waits for ALTER to finish.
let $wait_condition=
  select count(*) = 1 from information_schema.processlist
  where state = "Waiting for table metadata lock" and
         info = "SELECT table_name FROM information_schema.partitions WHERE SUBSTR(table_name,1,1)='#'";
--source include/wait_condition.inc
SET DEBUG_SYNC= 'now SIGNAL i_s_select_2';

--connection default
--echo #Reaping "ALTER ..."
--reap

--connection con1
--echo #Reaping "SELECT"
--reap

SET DEBUG_SYNC= 'RESET';
SET GLOBAL DEBUG='';

#
# This is test case to check assert in Bug#22285643.
#

--connection con3
USE test_i_s;

SET GLOBAL DEBUG='d,alter_table_after_rename';
SET DEBUG_SYNC=
  'before_rename_in_dd SIGNAL blocked WAIT_FOR i_s_select';

--echo # Sending:
--send ALTER TABLE t1 add column (c3 int)

--connection con4
SET DEBUG_SYNC= 'now WAIT_FOR blocked';
SET DEBUG_SYNC=
  'after_acquire_abstract_table SIGNAL i_s_select WAIT_FOR blocked_2';

--send SELECT table_name FROM information_schema.partitions WHERE table_schema='test_i_s' and table_name LIKE '#sql%\_%'

--connection con5
let $wait_condition=
  select count(*) = 1 from information_schema.processlist
  where state = "Waiting for table metadata lock" and
         info LIKE "SELECT table_name FROM information_schema.partitions WHERE table_schema='test_i_s' and table_name LI%";
--source include/wait_condition.inc
SET DEBUG_SYNC= 'now SIGNAL i_s_select';

--connection con3
--echo #Reaping "ALTER ..."
--reap
SET DEBUG_SYNC= 'now SIGNAL blocked_2';

--connection con4
--echo #Reaping "SELECT"
--reap

--connection default
SET DEBUG_SYNC= 'RESET';
SET GLOBAL DEBUG='';


#
# This is test case to check error paths in Bug#22681959 and Bug#22285643.
#

--connection default
USE test_i_s;
CREATE TABLE pid_table(pid_no INT);

SET @conn_id= connection_id();
--let $pid_file=`SELECT @@pid_file`
--replace_result $pid_file pid_file
--eval LOAD DATA LOCAL INFILE '$pid_file' INTO TABLE pid_table
--let $temp_table_name= `SELECT CONCAT('#sql-', LCASE(HEX(pid_no)), '_', @conn_id) FROM pid_table`
--let $temp_table_backup_name= `SELECT CONCAT('#sql2-', LCASE(HEX(pid_no)), '-', @conn_id) FROM pid_table`

# Lock the temporary table name to be used while ALTER
--connection con1
use test_i_s;
--disable_query_log
eval CREATE  TABLE `$temp_table_name`(a int);
eval LOCK TABLE `$temp_table_name` WRITE;
--enable_query_log

# ALTER will timeout while trying to get MDL on temporary table name.
--connection default
SET @lock_wait_timeout_saved= @@lock_wait_timeout;
SET lock_wait_timeout = 1;
--error ER_LOCK_WAIT_TIMEOUT
ALTER TABLE t1 add column (c4 int);

# Lock the backup temporary table name to be used while ALTER
--connection con1
UNLOCK TABLES;
--disable_query_log
eval DROP  TABLE `$temp_table_name`;
eval CREATE  TABLE `$temp_table_backup_name`(a int);
eval LOCK TABLE `$temp_table_backup_name` WRITE;
--enable_query_log

# ALTER will timeout while trying to get MDL on backup temporary table name.
--connection default
SET lock_wait_timeout = 1;
--error ER_LOCK_WAIT_TIMEOUT
ALTER TABLE t1 add column (c4 int);

--connection con1
--disable_query_log
eval DROP  TABLE `$temp_table_backup_name`;
--enable_query_log
--disconnect con1
--source include/wait_until_disconnected.inc
--disconnect con2
--source include/wait_until_disconnected.inc
--disconnect con3
--source include/wait_until_disconnected.inc
--disconnect con4
--source include/wait_until_disconnected.inc
--disconnect con5
--source include/wait_until_disconnected.inc
--connection default
--disable_connect_log
DROP SCHEMA test_i_s;
SET @@lock_wait_timeout= @lock_wait_timeout_saved;
# Wait till all disconnects are completed
--source include/wait_until_count_sessions.inc
