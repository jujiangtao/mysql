# This test tests the GIS functions that take as arguments a BLOB containing
# a Well-Known Binary (WKB) representation and optionally, a spatial reference
# system identifier (SRID). They return the corresponding geometry.
#
# Creation Date : 2016-03-16
# Author : Pavan Naik
#

SET @wkb_pt = ST_AsWKB(ST_GeomFromText('POINT(0 0)'));
SET @wkb_ln = ST_AsWKB(ST_GeomFromText('LINESTRING(0 0,2 2,4 4,6 6,8 8, 10 10)'));
SET @wkb_py = ST_AsWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))'));
SET @wkb_mpt = ST_AsWKB(ST_GeomFromText('MULTIPOINT(0 0,2 2,4 4,6 6)'));
SET @wkb_mln = ST_AsWKB(ST_GeomFromText('MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))'));
SET @wkb_mpy = ST_AsWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),'
                                                     '((10 10,10 12,12 12,12 10,10 10)))'));
SET @wkb_gc = ST_AsWKB(ST_GeomFromText('GEOMETRYCOLLECTION('
                                           'POINT(0 0),'
                                           'LINESTRING(0 0,10 10),'
                                           'POLYGON((0 0,0 10,10 10,10 0, 0 0)),'
                                           'MULTIPOINT(0 0,2 2,4 4,6 6,8 8,10 10),'
                                           'MULTILINESTRING((0 0,10 10),(0 10,10 0)),'
                                           'MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))'));

--echo #
--echo # Functions that accept a WKT value of any geometry type.
--echo #

--echo # ST_GeomFromWKB()
SELECT ST_AsText(ST_GeomFromWKB(@wkb_pt));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_ln));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_py));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mpt));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mln));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mpy));
SELECT ST_AsText(ST_GeomFromWKB(@wkb_gc));

--echo # ST_GeometryFromWKB()
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_pt));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_ln));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_py));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mpt));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mln));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mpy));
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_gc));

--echo #
--echo # Function that accepts a WKT value of Point geometry
--echo #

--echo # ST_PointFromWKB()
SELECT ST_AsText(ST_PointFromWKB(@wkb_pt));

--echo #
--echo # Functions that accept a WKT value of LineString geometry
--echo #

--echo # ST_LineFromWKB()
SELECT ST_AsText(ST_LineFromWKB(@wkb_ln));

--echo # ST_LineStringFromWKB()
SELECT ST_AsText(ST_LineStringFromWKB(@wkb_ln));

--echo #
--echo # Functions that accept a WKT value of Polygon geometry
--echo #

--echo # ST_PolyFromWKB()
SELECT ST_AsText(ST_PolyFromWKB(@wkb_py));

--echo # ST_PolygonFromWKB()
SELECT ST_AsText(ST_PolygonFromWKB(@wkb_py));

--echo #
--echo # Functions that accept a WKT value of MultiPoint geometry
--echo #

--echo # ST_MPointFromWKB()
SELECT ST_AsText(ST_MPointFromWKB(@wkb_mpt));

--echo # ST_MultiPointFromWKB()
SELECT ST_AsText(ST_MultiPointFromWKB(@wkb_mpt));

--echo #
--echo # Functions that accept a WKT value of MultiLineString geometry
--echo #

--echo # ST_MLineFromWKB()
SELECT ST_AsText(ST_MLineFromWKB(@wkb_mln));

--echo # ST_MultiLineStringFromWKB()
SELECT ST_AsText(ST_MultiLineStringFromWKB(@wkb_mln));

--echo #
--echo # Functions that accept a WKT value of MultiPolygon geometry
--echo #

--echo # ST_MPolyFromWKB()
SELECT ST_AsText(ST_MPolyFromWKB(@wkb_mpy));

--echo # ST_MultiPolygonFromWKB()
SELECT ST_AsText(ST_MultiPolygonFromWKB(@wkb_mpy));

--echo #
--echo # Functions that accept a WKT value of GeometryCollection geometry
--echo #

--echo # ST_GeomCollFromWKB()
SELECT ST_AsText(ST_GeomCollFromWKB(@wkb_gc));

--echo # ST_GeometryCollectionFromWKB()
SELECT ST_AsText(ST_GeometryCollectionFromWKB(@wkb_gc));

--echo #
--echo # Invalid function calls
--echo #

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_GeomFromWKB();

SELECT ST_GeomFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_GeomFromWKB(ST_GeomFromText('POINT()'));

--error ER_GIS_INVALID_DATA
SELECT ST_GeomFromWKB(ST_GeomFromText('LINESTRING(0 0,! 10)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_GeometryFromWKB();

SELECT ST_GeometryFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_GeometryFromWKB(ST_GeomFromText('POINT(! 0)'));

--error ER_GIS_INVALID_DATA
SELECT ST_GeometryFromWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_PointFromWKB();

SELECT ST_PointFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_PointFromWKB(ST_GeomFromText('POINT()'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_LineFromWKB();

SELECT ST_LineFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_LineFromWKB(ST_GeomFromText('LINESTRING(a a,b b)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_LineStringFromWKB();

SELECT ST_LineStringFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_LineStringFromWKB(ST_GeomFromText('LINESTRING(1 1,1 b)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_PolyFromWKB();

SELECT ST_PolyFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_PolyFromWKB(ST_GeomFromText('POLYGON(())'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_PolygonFromWKB();

SELECT ST_PolygonFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_PolygonFromWKB(ST_GeomFromText('POLYGON((0 0,0 5,5 5,5 0,0 0),())'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MPointFromWKB();

SELECT ST_MPointFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MPointFromWKB(ST_GeomFromText('MULTIPOINT(0 0,1)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MultiPointFromWKB();

SELECT ST_MultiPointFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MultiPointFromWKB(ST_GeomFromText('MULTIPOINT(0 0,1 1 1)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MLineFromWKB();

SELECT ST_MLineFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MLineFromWKB(ST_GeomFromText('MULTILINESTRING((0 0,1),())'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MultiLineStringFromWKB();

SELECT ST_MultiLineStringFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MultiLineStringFromWKB(ST_GeomFromText('MULTILINESTRING((0 0,1),(1 1,2 2)'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MPolyFromWKB();

SELECT ST_MPolyFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MPolyFromWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,1)),(()))'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_MultiPolygonFromWKB();

SELECT ST_MultiPolygonFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_MultiPolygonFromWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 1,1 1,1 0,0 0)),(2 2,2 3,3 3,3 2,2 2))'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_GeomCollFromWKB();

SELECT ST_GeomCollFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_GeomCollFromWKB(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(a a))'));

--error ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT
SELECT ST_GeometryCollectionFromWKB();

SELECT ST_GeometryCollectionFromWKB(NULL);

--error ER_GIS_INVALID_DATA
SELECT ST_GeometryCollectionFromWKB(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,1 1)'));

--echo #
--echo # WL#8579 Spatial Reference Systems
--echo #

DELIMITER |;
CREATE PROCEDURE gis_wkb_funcs(IN srid INT)
BEGIN
    SET @wkb_pt = ST_AsWKB(ST_GeomFromText('POINT(0 0)'));
    SET @wkb_ln = ST_AsWKB(ST_GeomFromText('LINESTRING(0 0,2 2,4 4,6 6,8 8, 10 10)'));
    SET @wkb_py = ST_AsWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))'));
    SET @wkb_mpt = ST_AsWKB(ST_GeomFromText('MULTIPOINT(0 0,2 2,4 4,6 6)'));
    SET @wkb_mln = ST_AsWKB(ST_GeomFromText('MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))'));
    SET @wkb_mpy = ST_AsWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),'
                                                         '((10 10,10 12,12 12,12 10,10 10)))'));
    SET @wkb_gc = ST_AsWKB(ST_GeomFromText('GEOMETRYCOLLECTION('
                                               'POINT(0 0),'
                                               'LINESTRING(0 0,10 10),'
                                               'POLYGON((0 0,0 10,10 10,10 0, 0 0)),'
                                               'MULTIPOINT(0 0,2 2,4 4,6 6,8 8,10 10),'
                                               'MULTILINESTRING((0 0,10 10),(0 10,10 0)),'
                                               'MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))'));

    # GIS WKB functions
    DO ST_GeomFromWKB(@wkb_pt, srid);
    DO ST_GeometryFromWKB(@wkb_pt, srid);

    DO ST_PointFromWKB(@wkb_pt, srid);

    DO ST_LineFromWKB(@wkb_ln, srid);
    DO ST_LineStringFromWKB(@wkb_ln, srid);

    DO ST_PolyFromWKB(@wkb_py, srid);
    DO ST_PolygonFromWKB(@wkb_py, srid);

    DO ST_MPointFromWKB(@wkb_mpt, srid);
    DO ST_MultiPointFromWKB(@wkb_mpt, srid);

    DO ST_MLineFromWKB(@wkb_mln, srid);
    DO ST_MultiLineStringFromWKB(@wkb_mln, srid);

    DO ST_MPolyFromWKB(@wkb_mpy, srid);
    DO ST_MultiPolygonFromWKB(@wkb_mpy, srid);

    DO ST_GeomCollFromWKB(@wkb_gc, srid);
    DO ST_GeometryCollectionFromWKB(@wkb_gc, srid);
END |
DELIMITER ;|

--echo # SRID 0 (should pass)
CALL gis_wkb_funcs(0);

--echo # Projected SRS (should pass)
CALL gis_wkb_funcs(2000);

--echo # Geographic SRS (should pass)
CALL gis_wkb_funcs(4326);

--echo # Undefined SRS (should pass)
# Assume SRID 19000000 is undefined
CALL gis_wkb_funcs(19000000);

--echo # Unparseable SRS definition (should pass)
# Assume SRID 66666666 is undefined
INSERT INTO mysql.st_spatial_reference_systems(id, catalog_id, name,
organization, organization_coordsys_id, definition, description)
VALUES (66666666, 1, 'TEST66666666', 'Foo', 66666666, 'FOOBAR', '');
CALL gis_wkb_funcs(66666666);

--echo # Clean up
DROP PROCEDURE gis_wkb_funcs;
DELETE FROM mysql.st_spatial_reference_systems WHERE id = 66666666;
