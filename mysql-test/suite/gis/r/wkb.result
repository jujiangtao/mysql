SET @wkb_pt = ST_AsWKB(ST_GeomFromText('POINT(0 0)'));
SET @wkb_ln = ST_AsWKB(ST_GeomFromText('LINESTRING(0 0,2 2,4 4,6 6,8 8, 10 10)'));
SET @wkb_py = ST_AsWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))'));
SET @wkb_mpt = ST_AsWKB(ST_GeomFromText('MULTIPOINT(0 0,2 2,4 4,6 6)'));
SET @wkb_mln = ST_AsWKB(ST_GeomFromText('MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))'));
SET @wkb_mpy = ST_AsWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),'
                                                     '((10 10,10 12,12 12,12 10,10 10)))'));
SET @wkb_gc = ST_AsWKB(ST_GeomFromText('GEOMETRYCOLLECTION('
                                           'POINT(0 0),'
                                           'LINESTRING(0 0,10 10),'
                                           'POLYGON((0 0,0 10,10 10,10 0, 0 0)),'
                                           'MULTIPOINT(0 0,2 2,4 4,6 6,8 8,10 10),'
                                           'MULTILINESTRING((0 0,10 10),(0 10,10 0)),'
                                           'MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))'));
#
# Functions that accept a WKT value of any geometry type.
#
# ST_GeomFromWKB()
SELECT ST_AsText(ST_GeomFromWKB(@wkb_pt));
ST_AsText(ST_GeomFromWKB(@wkb_pt))
POINT(0 0)
SELECT ST_AsText(ST_GeomFromWKB(@wkb_ln));
ST_AsText(ST_GeomFromWKB(@wkb_ln))
LINESTRING(0 0,2 2,4 4,6 6,8 8,10 10)
SELECT ST_AsText(ST_GeomFromWKB(@wkb_py));
ST_AsText(ST_GeomFromWKB(@wkb_py))
POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mpt));
ST_AsText(ST_GeomFromWKB(@wkb_mpt))
MULTIPOINT((0 0),(2 2),(4 4),(6 6))
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mln));
ST_AsText(ST_GeomFromWKB(@wkb_mln))
MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))
SELECT ST_AsText(ST_GeomFromWKB(@wkb_mpy));
ST_AsText(ST_GeomFromWKB(@wkb_mpy))
MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),((10 10,10 12,12 12,12 10,10 10)))
SELECT ST_AsText(ST_GeomFromWKB(@wkb_gc));
ST_AsText(ST_GeomFromWKB(@wkb_gc))
GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(0 0,10 10),POLYGON((0 0,0 10,10 10,10 0,0 0)),MULTIPOINT((0 0),(2 2),(4 4),(6 6),(8 8),(10 10)),MULTILINESTRING((0 0,10 10),(0 10,10 0)),MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))
# ST_GeometryFromWKB()
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_pt));
ST_AsText(ST_GeometryFromWKB(@wkb_pt))
POINT(0 0)
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_ln));
ST_AsText(ST_GeometryFromWKB(@wkb_ln))
LINESTRING(0 0,2 2,4 4,6 6,8 8,10 10)
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_py));
ST_AsText(ST_GeometryFromWKB(@wkb_py))
POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mpt));
ST_AsText(ST_GeometryFromWKB(@wkb_mpt))
MULTIPOINT((0 0),(2 2),(4 4),(6 6))
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mln));
ST_AsText(ST_GeometryFromWKB(@wkb_mln))
MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_mpy));
ST_AsText(ST_GeometryFromWKB(@wkb_mpy))
MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),((10 10,10 12,12 12,12 10,10 10)))
SELECT ST_AsText(ST_GeometryFromWKB(@wkb_gc));
ST_AsText(ST_GeometryFromWKB(@wkb_gc))
GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(0 0,10 10),POLYGON((0 0,0 10,10 10,10 0,0 0)),MULTIPOINT((0 0),(2 2),(4 4),(6 6),(8 8),(10 10)),MULTILINESTRING((0 0,10 10),(0 10,10 0)),MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))
#
# Function that accepts a WKT value of Point geometry
#
# ST_PointFromWKB()
SELECT ST_AsText(ST_PointFromWKB(@wkb_pt));
ST_AsText(ST_PointFromWKB(@wkb_pt))
POINT(0 0)
#
# Functions that accept a WKT value of LineString geometry
#
# ST_LineFromWKB()
SELECT ST_AsText(ST_LineFromWKB(@wkb_ln));
ST_AsText(ST_LineFromWKB(@wkb_ln))
LINESTRING(0 0,2 2,4 4,6 6,8 8,10 10)
# ST_LineStringFromWKB()
SELECT ST_AsText(ST_LineStringFromWKB(@wkb_ln));
ST_AsText(ST_LineStringFromWKB(@wkb_ln))
LINESTRING(0 0,2 2,4 4,6 6,8 8,10 10)
#
# Functions that accept a WKT value of Polygon geometry
#
# ST_PolyFromWKB()
SELECT ST_AsText(ST_PolyFromWKB(@wkb_py));
ST_AsText(ST_PolyFromWKB(@wkb_py))
POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))
# ST_PolygonFromWKB()
SELECT ST_AsText(ST_PolygonFromWKB(@wkb_py));
ST_AsText(ST_PolygonFromWKB(@wkb_py))
POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))
#
# Functions that accept a WKT value of MultiPoint geometry
#
# ST_MPointFromWKB()
SELECT ST_AsText(ST_MPointFromWKB(@wkb_mpt));
ST_AsText(ST_MPointFromWKB(@wkb_mpt))
MULTIPOINT((0 0),(2 2),(4 4),(6 6))
# ST_MultiPointFromWKB()
SELECT ST_AsText(ST_MultiPointFromWKB(@wkb_mpt));
ST_AsText(ST_MultiPointFromWKB(@wkb_mpt))
MULTIPOINT((0 0),(2 2),(4 4),(6 6))
#
# Functions that accept a WKT value of MultiLineString geometry
#
# ST_MLineFromWKB()
SELECT ST_AsText(ST_MLineFromWKB(@wkb_mln));
ST_AsText(ST_MLineFromWKB(@wkb_mln))
MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))
# ST_MultiLineStringFromWKB()
SELECT ST_AsText(ST_MultiLineStringFromWKB(@wkb_mln));
ST_AsText(ST_MultiLineStringFromWKB(@wkb_mln))
MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))
#
# Functions that accept a WKT value of MultiPolygon geometry
#
# ST_MPolyFromWKB()
SELECT ST_AsText(ST_MPolyFromWKB(@wkb_mpy));
ST_AsText(ST_MPolyFromWKB(@wkb_mpy))
MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),((10 10,10 12,12 12,12 10,10 10)))
# ST_MultiPolygonFromWKB()
SELECT ST_AsText(ST_MultiPolygonFromWKB(@wkb_mpy));
ST_AsText(ST_MultiPolygonFromWKB(@wkb_mpy))
MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),((10 10,10 12,12 12,12 10,10 10)))
#
# Functions that accept a WKT value of GeometryCollection geometry
#
# ST_GeomCollFromWKB()
SELECT ST_AsText(ST_GeomCollFromWKB(@wkb_gc));
ST_AsText(ST_GeomCollFromWKB(@wkb_gc))
GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(0 0,10 10),POLYGON((0 0,0 10,10 10,10 0,0 0)),MULTIPOINT((0 0),(2 2),(4 4),(6 6),(8 8),(10 10)),MULTILINESTRING((0 0,10 10),(0 10,10 0)),MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))
# ST_GeometryCollectionFromWKB()
SELECT ST_AsText(ST_GeometryCollectionFromWKB(@wkb_gc));
ST_AsText(ST_GeometryCollectionFromWKB(@wkb_gc))
GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(0 0,10 10),POLYGON((0 0,0 10,10 10,10 0,0 0)),MULTIPOINT((0 0),(2 2),(4 4),(6 6),(8 8),(10 10)),MULTILINESTRING((0 0,10 10),(0 10,10 0)),MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))
#
# Invalid function calls
#
SELECT ST_GeomFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_GeomFromWKB'
SELECT ST_GeomFromWKB(NULL);
ST_GeomFromWKB(NULL)
NULL
SELECT ST_GeomFromWKB(ST_GeomFromText('POINT()'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_GeomFromWKB(ST_GeomFromText('LINESTRING(0 0,! 10)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_GeometryFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_GeometryFromWKB'
SELECT ST_GeometryFromWKB(NULL);
ST_GeometryFromWKB(NULL)
NULL
SELECT ST_GeometryFromWKB(ST_GeomFromText('POINT(! 0)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_GeometryFromWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_PointFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_PointFromWKB'
SELECT ST_PointFromWKB(NULL);
ST_PointFromWKB(NULL)
NULL
SELECT ST_PointFromWKB(ST_GeomFromText('POINT()'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_LineFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_LineFromWKB'
SELECT ST_LineFromWKB(NULL);
ST_LineFromWKB(NULL)
NULL
SELECT ST_LineFromWKB(ST_GeomFromText('LINESTRING(a a,b b)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_LineStringFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_LineStringFromWKB'
SELECT ST_LineStringFromWKB(NULL);
ST_LineStringFromWKB(NULL)
NULL
SELECT ST_LineStringFromWKB(ST_GeomFromText('LINESTRING(1 1,1 b)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_PolyFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_PolyFromWKB'
SELECT ST_PolyFromWKB(NULL);
ST_PolyFromWKB(NULL)
NULL
SELECT ST_PolyFromWKB(ST_GeomFromText('POLYGON(())'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_PolygonFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_PolygonFromWKB'
SELECT ST_PolygonFromWKB(NULL);
ST_PolygonFromWKB(NULL)
NULL
SELECT ST_PolygonFromWKB(ST_GeomFromText('POLYGON((0 0,0 5,5 5,5 0,0 0),())'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MPointFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MPointFromWKB'
SELECT ST_MPointFromWKB(NULL);
ST_MPointFromWKB(NULL)
NULL
SELECT ST_MPointFromWKB(ST_GeomFromText('MULTIPOINT(0 0,1)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MultiPointFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MultiPointFromWKB'
SELECT ST_MultiPointFromWKB(NULL);
ST_MultiPointFromWKB(NULL)
NULL
SELECT ST_MultiPointFromWKB(ST_GeomFromText('MULTIPOINT(0 0,1 1 1)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MLineFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MLineFromWKB'
SELECT ST_MLineFromWKB(NULL);
ST_MLineFromWKB(NULL)
NULL
SELECT ST_MLineFromWKB(ST_GeomFromText('MULTILINESTRING((0 0,1),())'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MultiLineStringFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MultiLineStringFromWKB'
SELECT ST_MultiLineStringFromWKB(NULL);
ST_MultiLineStringFromWKB(NULL)
NULL
SELECT ST_MultiLineStringFromWKB(ST_GeomFromText('MULTILINESTRING((0 0,1),(1 1,2 2)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MPolyFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MPolyFromWKB'
SELECT ST_MPolyFromWKB(NULL);
ST_MPolyFromWKB(NULL)
NULL
SELECT ST_MPolyFromWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,1)),(()))'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_MultiPolygonFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_MultiPolygonFromWKB'
SELECT ST_MultiPolygonFromWKB(NULL);
ST_MultiPolygonFromWKB(NULL)
NULL
SELECT ST_MultiPolygonFromWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 1,1 1,1 0,0 0)),(2 2,2 3,3 3,3 2,2 2))'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_GeomCollFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_GeomCollFromWKB'
SELECT ST_GeomCollFromWKB(NULL);
ST_GeomCollFromWKB(NULL)
NULL
SELECT ST_GeomCollFromWKB(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(a a))'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
SELECT ST_GeometryCollectionFromWKB();
ERROR 42000: Incorrect parameter count in the call to native function 'ST_GeometryCollectionFromWKB'
SELECT ST_GeometryCollectionFromWKB(NULL);
ST_GeometryCollectionFromWKB(NULL)
NULL
SELECT ST_GeometryCollectionFromWKB(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,1 1)'));
ERROR 22023: Invalid GIS data provided to function st_geomfromtext.
#
# WL#8579 Spatial Reference Systems
#
CREATE PROCEDURE gis_wkb_funcs(IN srid INT)
BEGIN
SET @wkb_pt = ST_AsWKB(ST_GeomFromText('POINT(0 0)'));
SET @wkb_ln = ST_AsWKB(ST_GeomFromText('LINESTRING(0 0,2 2,4 4,6 6,8 8, 10 10)'));
SET @wkb_py = ST_AsWKB(ST_GeomFromText('POLYGON((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4))'));
SET @wkb_mpt = ST_AsWKB(ST_GeomFromText('MULTIPOINT(0 0,2 2,4 4,6 6)'));
SET @wkb_mln = ST_AsWKB(ST_GeomFromText('MULTILINESTRING((0 0,2 2,4 4),(6 6,8 8,10 10))'));
SET @wkb_mpy = ST_AsWKB(ST_GeomFromText('MULTIPOLYGON(((0 0,0 10,10 10,10 0,0 0),(4 4,4 6,6 6,6 4,4 4)),'
                                                         '((10 10,10 12,12 12,12 10,10 10)))'));
SET @wkb_gc = ST_AsWKB(ST_GeomFromText('GEOMETRYCOLLECTION('
                                               'POINT(0 0),'
                                               'LINESTRING(0 0,10 10),'
                                               'POLYGON((0 0,0 10,10 10,10 0, 0 0)),'
                                               'MULTIPOINT(0 0,2 2,4 4,6 6,8 8,10 10),'
                                               'MULTILINESTRING((0 0,10 10),(0 10,10 0)),'
                                               'MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5))))'));
# GIS WKB functions
DO ST_GeomFromWKB(@wkb_pt, srid);
DO ST_GeometryFromWKB(@wkb_pt, srid);
DO ST_PointFromWKB(@wkb_pt, srid);
DO ST_LineFromWKB(@wkb_ln, srid);
DO ST_LineStringFromWKB(@wkb_ln, srid);
DO ST_PolyFromWKB(@wkb_py, srid);
DO ST_PolygonFromWKB(@wkb_py, srid);
DO ST_MPointFromWKB(@wkb_mpt, srid);
DO ST_MultiPointFromWKB(@wkb_mpt, srid);
DO ST_MLineFromWKB(@wkb_mln, srid);
DO ST_MultiLineStringFromWKB(@wkb_mln, srid);
DO ST_MPolyFromWKB(@wkb_mpy, srid);
DO ST_MultiPolygonFromWKB(@wkb_mpy, srid);
DO ST_GeomCollFromWKB(@wkb_gc, srid);
DO ST_GeometryCollectionFromWKB(@wkb_gc, srid);
END |
# SRID 0 (should pass)
CALL gis_wkb_funcs(0);
# Projected SRS (should pass)
CALL gis_wkb_funcs(2000);
# Geographic SRS (should pass)
CALL gis_wkb_funcs(4326);
# Undefined SRS (should pass)
CALL gis_wkb_funcs(19000000);
# Unparseable SRS definition (should pass)
INSERT INTO mysql.st_spatial_reference_systems(id, catalog_id, name,
organization, organization_coordsys_id, definition, description)
VALUES (66666666, 1, 'TEST66666666', 'Foo', 66666666, 'FOOBAR', '');
CALL gis_wkb_funcs(66666666);
# Clean up
DROP PROCEDURE gis_wkb_funcs;
DELETE FROM mysql.st_spatial_reference_systems WHERE id = 66666666;
